[gd_resource type="VisualShader" load_steps=21 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "uv"

[sub_resource type="VisualShaderNodeVec3Uniform" id=2]
uniform_name = "texture_direction"

[sub_resource type="VisualShaderNodeScalarOp" id=3]
default_input_values = [ 0, 0.0, 1, 10.0 ]
operator = 3

[sub_resource type="VisualShaderNodeVectorOp" id=4]

[sub_resource type="VisualShaderNodeInput" id=5]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=6]
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=7]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=8]
default_input_values = [ 0, 0.0, 1, 1.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=9]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 3

[sub_resource type="VisualShaderNodeTextureUniform" id=10]
uniform_name = "albedo_texture"
texture_type = 1

[sub_resource type="VisualShaderNodeScalarUniform" id=11]
uniform_name = "emission_speed"

[sub_resource type="VisualShaderNodeScalarOp" id=12]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=18]
uniform_name = "emission"

[sub_resource type="VisualShaderNodeScalarOp" id=19]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=20]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=13]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=14]
uniform_name = "emission_strenght"

[sub_resource type="VisualShaderNodeColorUniform" id=15]
uniform_name = "emission_color"

[sub_resource type="VisualShaderNodeInput" id=16]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorOp" id=17]
output_port_for_preview = 0
operator = 2

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform vec3 texture_direction;
uniform sampler2D albedo_texture : hint_albedo;
uniform vec4 emission_color : hint_color;
uniform float emission_strenght;
uniform float emission;
uniform float emission_speed;



void vertex() {
// Output:0

}

void fragment() {
// Input:10
	vec3 n_out10p0 = vec3(UV, 0.0);

// VectorUniform:11
	vec3 n_out11p0 = texture_direction;

// Input:7
	float n_out7p0 = TIME;

// ScalarOp:12
	float n_in12p1 = 10.00000;
	float n_out12p0 = n_out7p0 / n_in12p1;

// VectorOp:9
	vec3 n_out9p0 = n_out11p0 * vec3(n_out12p0);

// VectorOp:13
	vec3 n_out13p0 = n_out10p0 + n_out9p0;

// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture(albedo_texture, n_out13p0.xy);
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// ColorUniform:6
	vec3 n_out6p0 = emission_color.rgb;
	float n_out6p1 = emission_color.a;

// ScalarUniform:5
	float n_out5p0 = emission_strenght;

// ScalarUniform:22
	float n_out22p0 = emission;

// ScalarOp:24
	float n_out24p0 = n_out5p0 * n_out22p0;

// Input:14
	float n_out14p0 = TIME;

// ScalarUniform:20
	float n_out20p0 = emission_speed;

// ScalarOp:21
	float n_out21p0 = n_out14p0 * n_out20p0;

// ScalarOp:23
	float n_out23p0 = n_out22p0 * n_out21p0;

// ScalarFunc:15
	float n_out15p0 = sin(n_out23p0);

// ScalarOp:18
	float n_in18p1 = 1.00000;
	float n_out18p0 = n_out15p0 + n_in18p1;

// ScalarOp:19
	float n_in19p1 = 2.00000;
	float n_out19p0 = n_out18p0 / n_in19p1;

// ScalarOp:17
	float n_out17p0 = n_out24p0 * n_out19p0;

// VectorOp:4
	vec3 n_out4p0 = n_out6p0 * vec3(n_out17p0);

// Output:0
	ALBEDO = n_out2p0;
	EMISSION = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -808.361, -127 )
nodes/fragment/0/position = Vector2( 800, 0 )
nodes/fragment/2/node = SubResource( 10 )
nodes/fragment/2/position = Vector2( 400, 0 )
nodes/fragment/4/node = SubResource( 13 )
nodes/fragment/4/position = Vector2( 600, 200 )
nodes/fragment/5/node = SubResource( 14 )
nodes/fragment/5/position = Vector2( -200, 400 )
nodes/fragment/6/node = SubResource( 15 )
nodes/fragment/6/position = Vector2( 400, 200 )
nodes/fragment/7/node = SubResource( 16 )
nodes/fragment/7/position = Vector2( -400, 200 )
nodes/fragment/9/node = SubResource( 17 )
nodes/fragment/9/position = Vector2( 0, 200 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 0, 0 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -200, 0 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( -200, 200 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( 200, 0 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( -800, 800 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( -200, 800 )
nodes/fragment/17/node = SubResource( 7 )
nodes/fragment/17/position = Vector2( 400, 400 )
nodes/fragment/18/node = SubResource( 8 )
nodes/fragment/18/position = Vector2( 0, 800 )
nodes/fragment/19/node = SubResource( 9 )
nodes/fragment/19/position = Vector2( 200, 800 )
nodes/fragment/20/node = SubResource( 11 )
nodes/fragment/20/position = Vector2( -800, 1000 )
nodes/fragment/21/node = SubResource( 12 )
nodes/fragment/21/position = Vector2( -600, 800 )
nodes/fragment/22/node = SubResource( 18 )
nodes/fragment/22/position = Vector2( -600, 600 )
nodes/fragment/23/node = SubResource( 19 )
nodes/fragment/23/position = Vector2( -400, 800 )
nodes/fragment/24/node = SubResource( 20 )
nodes/fragment/24/position = Vector2( 200, 400 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 4, 0, 0, 5, 6, 0, 4, 0, 7, 0, 12, 0, 11, 0, 9, 0, 12, 0, 9, 1, 13, 0, 2, 0, 10, 0, 13, 0, 9, 0, 13, 1, 17, 0, 4, 1, 15, 0, 18, 0, 18, 0, 19, 0, 19, 0, 17, 1, 14, 0, 21, 0, 20, 0, 21, 1, 22, 0, 23, 0, 21, 0, 23, 1, 23, 0, 15, 0, 24, 0, 17, 0, 5, 0, 24, 0, 22, 0, 24, 1 )
